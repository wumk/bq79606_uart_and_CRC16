//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? ??? 5 2018 13:56:54
//
//      Input file      : 
//      Component name  : axi_uartlite
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module axi_uartlite(S_AXI_ACLK, S_AXI_ARESETN, Interrupt, S_AXI_AWADDR, S_AXI_AWVALID, S_AXI_AWREADY, S_AXI_WDATA, S_AXI_WSTRB, S_AXI_WVALID, S_AXI_WREADY, S_AXI_BRESP, S_AXI_BVALID, S_AXI_BREADY, S_AXI_ARADDR, S_AXI_ARVALID, S_AXI_ARREADY, S_AXI_RDATA, S_AXI_RRESP, S_AXI_RVALID, S_AXI_RREADY, RX, TX);
   parameter [32*8:1]                         C_FAMILY = "virtex6";
   parameter                                  C_S_AXI_ACLK_FREQ_HZ = 100_000_000;
   parameter                                  C_S_AXI_ADDR_WIDTH = 4;
   parameter [7:0]                            C_S_AXI_DATA_WIDTH = 32;
   parameter                                  C_BAUDRATE = 9600;
   parameter [3:0]                            C_DATA_BITS = 8;
   parameter [0:0]                            C_USE_PARITY = 0;
   parameter [0:0]                            C_ODD_PARITY = 0;
   parameter [32*8:1]                         C_INSTANCE = "axi_uartlite_inst";
   
   input                                      S_AXI_ACLK;
   input                                      S_AXI_ARESETN;
   output                                     Interrupt;
   
   input [3:0]                                S_AXI_AWADDR;
   input                                      S_AXI_AWVALID;
   output                                     S_AXI_AWREADY;
   input [31:0]                               S_AXI_WDATA;
   input [3:0]                                S_AXI_WSTRB;
   input                                      S_AXI_WVALID;
   output                                     S_AXI_WREADY;
   output [1:0]                               S_AXI_BRESP;
   output                                     S_AXI_BVALID;
   input                                      S_AXI_BREADY;
   input [3:0]                                S_AXI_ARADDR;
   input                                      S_AXI_ARVALID;
   output                                     S_AXI_ARREADY;
   output [31:0]                              S_AXI_RDATA;
   output [1:0]                               S_AXI_RRESP;
   output                                     S_AXI_RVALID;
   input                                      S_AXI_RREADY;
   
   input                                      RX;
   output                                     TX;
   
   
   parameter [32*8:1]                         C_CORE_GENERATION_INFO = {C_INSTANCE, ",axi_uartlite,{", "c_family=", C_FAMILY, ",c_instance=", C_INSTANCE, ",c_s_axi_aclk_freq_hz=", 0, ",c_baudrate=", 0, ",c_data_bits=", 0, ",c_use_parity=", 0, ",c_odd_parity=", 0, "}"};
   
   parameter [31:0]                           ZEROES = 32'h00000000;
   
   parameter                                  C_ARD_ADDR_RANGE_ARRAY = {{ZEROES, 32'h00000000}, {ZEROES, (32'h00000000 | 32'h0000000F)}};
   
   parameter                                  C_ARD_NUM_CE_ARRAY = 4;
   
   parameter [31:0]                           C_S_AXI_MIN_SIZE = 32'h0000000F;
   
   parameter                                  C_USE_WSTRB = 0;
   
   parameter                                  C_DPHASE_TIMEOUT = 0;
   
   wire                                       bus2ip_clk;
   wire                                       bus2ip_reset;
   wire                                       bus2ip_resetn;
   wire [(C_S_AXI_DATA_WIDTH-1):0]            ip2bus_data;
   wire                                       ip2bus_error;
   wire                                       ip2bus_wrack;
   wire                                       ip2bus_rdack;
   wire [C_S_AXI_DATA_WIDTH-1:0]              bus2ip_data;
   wire [((1)/2)-1:0]                         bus2ip_cs;
   wire [calc_num_ce(C_ARD_NUM_CE_ARRAY)-1:0] bus2ip_rdce;
   wire [calc_num_ce(C_ARD_NUM_CE_ARRAY)-1:0] bus2ip_wrce;
   
   assign bus2ip_reset = (~bus2ip_resetn);
   
   assign ip2bus_data[(C_S_AXI_DATA_WIDTH - 1):8] = {C_S_AXI_DATA_WIDTH{1'b0}};
   
   
   axi_uartlite_v1_02_a.uartlite_core #(C_FAMILY, C_S_AXI_ACLK_FREQ_HZ, C_BAUDRATE, C_DATA_BITS, C_USE_PARITY, C_ODD_PARITY) UARTLITE_CORE_I(.clk(bus2ip_clk), .reset(bus2ip_reset), .bus2ip_data(bus2ip_data[7:0]), .bus2ip_rdce(bus2ip_rdce[3:0]), .bus2ip_wrce(bus2ip_wrce[3:0]), .bus2ip_cs(bus2ip_cs[0]), .ip2bus_rdack(ip2bus_rdack), .ip2bus_wrack(ip2bus_wrack), .ip2bus_error(ip2bus_error), .sin_dbus(ip2bus_data[7:0]), .rx(RX), .tx(TX), .interrupt(Interrupt));
   
   
   
   axi_lite_ipif_v1_01_a.axi_lite_ipif #(C_FAMILY, 4, C_S_AXI_DATA_WIDTH, C_S_AXI_MIN_SIZE, C_USE_WSTRB, C_DPHASE_TIMEOUT, C_ARD_ADDR_RANGE_ARRAY, C_ARD_NUM_CE_ARRAY) AXI_LITE_IPIF_I(.s_axi_aclk(S_AXI_ACLK), .s_axi_aresetn(S_AXI_ARESETN), .s_axi_awaddr(S_AXI_AWADDR), .s_axi_awvalid(S_AXI_AWVALID), .s_axi_awready(S_AXI_AWREADY), .s_axi_wdata(S_AXI_WDATA), .s_axi_wstrb(S_AXI_WSTRB), .s_axi_wvalid(S_AXI_WVALID), .s_axi_wready(S_AXI_WREADY), .s_axi_bresp(S_AXI_BRESP), .s_axi_bvalid(S_AXI_BVALID), .s_axi_bready(S_AXI_BREADY), .s_axi_araddr(S_AXI_ARADDR), .s_axi_arvalid(S_AXI_ARVALID), .s_axi_arready(S_AXI_ARREADY), .s_axi_rdata(S_AXI_RDATA), .s_axi_rresp(S_AXI_RRESP), .s_axi_rvalid(S_AXI_RVALID), .s_axi_rready(S_AXI_RREADY), .bus2ip_clk(bus2ip_clk), .bus2ip_resetn(bus2ip_resetn), .ip2bus_data(ip2bus_data), .ip2bus_wrack(ip2bus_wrack), .ip2bus_rdack(ip2bus_rdack), .ip2bus_error(ip2bus_error), .bus2ip_addr(), .bus2ip_data(bus2ip_data), .bus2ip_rnw(), .bus2ip_be(), .bus2ip_cs(bus2ip_cs), .bus2ip_rdce(bus2ip_rdce), .bus2ip_wrce(bus2ip_wrce));
   
endmodule
