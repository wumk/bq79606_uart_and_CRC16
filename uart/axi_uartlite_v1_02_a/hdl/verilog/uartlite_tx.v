//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? ??? 5 2018 13:59:02
//
//      Input file      : 
//      Component name  : uartlite_tx
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module uartlite_tx(Clk, Reset, EN_16x_Baud, TX, Write_TX_FIFO, Reset_TX_FIFO, TX_Data, TX_Buffer_Full, TX_Buffer_Empty);
   parameter [32*8:1]      C_FAMILY = "virtex6";
   parameter [3:0]         C_DATA_BITS = 8;
   parameter [0:0]         C_USE_PARITY = 0;
   parameter [0:0]         C_ODD_PARITY = 0;
   input                   Clk;
   input                   Reset;
   input                   EN_16x_Baud;
   output                  TX;
   reg                     TX;
   input                   Write_TX_FIFO;
   input                   Reset_TX_FIFO;
   input [0:C_DATA_BITS-1] TX_Data;
   output                  TX_Buffer_Full;
   output                  TX_Buffer_Empty;
   
   
   parameter               bo2sl = {1'b0, 1'b1};
   
   parameter [0:2]         MUX_SEL_INIT = ((C_DATA_BITS - 1));
   
   reg                     parity;
   reg                     tx_Run1;
   reg                     select_Parity;
   wire [0:C_DATA_BITS-1]  data_to_transfer;
   wire                    div16;
   reg                     tx_Data_Enable;
   reg                     tx_Start;
   reg                     tx_DataBits;
   wire                    tx_Run;
   reg [0:2]               mux_sel;
   wire                    mux_sel_is_zero;
   wire                    mux_01;
   wire                    mux_23;
   wire                    mux_45;
   wire                    mux_67;
   wire                    mux_0123;
   wire                    mux_4567;
   wire                    mux_Out;
   reg                     serial_Data;
   reg                     fifo_Read;
   wire                    fifo_Data_Present;
   wire                    fifo_Data_Empty;
   wire [0:C_DATA_BITS-1]  fifo_DOut;
   wire                    fifo_wr;
   wire                    fifo_rd;
   wire                    tx_buffer_full_i;
   wire                    TX_FIFO_Reset;
   
   
   proc_common_v3_00_a.dynshreg_i_f #(16, 1, 16'h8000, C_FAMILY) MID_START_BIT_SRL16_I(.clk(Clk), .clken(EN_16x_Baud), .addr(4'b1111), .din(0)(div16), .dout(0)(div16));
   
   
   always @(posedge Clk)
   begin: TX_DATA_ENABLE_DFF
      
      begin
         if (Reset == 1'b1)
            tx_Data_Enable <= 1'b0;
         else
            if (tx_Data_Enable == 1'b1)
               tx_Data_Enable <= 1'b0;
            else if (EN_16x_Baud == 1'b1)
               tx_Data_Enable <= div16;
      end
   end
   
   
   always @(posedge Clk)
   begin: TX_START_DFF
      
      begin
         if (Reset == 1'b1)
            tx_Start <= 1'b0;
         else
            tx_Start <= ((~(tx_Run)) & (tx_Start | (fifo_Data_Present & tx_Data_Enable)));
      end
   end
   
   
   always @(posedge Clk)
   begin: TX_DATA_DFF
      
      begin
         if (Reset == 1'b1)
            tx_DataBits <= 1'b0;
         else
            tx_DataBits <= ((~(fifo_Read)) & (tx_DataBits | (tx_Start & tx_Data_Enable)));
      end
   end
   
   
   always @(posedge Clk)
   begin: COUNTER
      
      begin
         if (Reset == 1'b1)
            mux_sel <= ((C_DATA_BITS - 1));
         else if (tx_Data_Enable == 1'b1)
         begin
            if (mux_sel_is_zero == 1'b1)
               mux_sel <= MUX_SEL_INIT;
            else if (tx_DataBits == 1'b1)
               mux_sel <= (mux_sel - 1);
         end
      end
   end
   
   assign mux_sel_is_zero = (mux_sel == 3'b000) ? 1'b1 : 
                            1'b0;
   
   
   always @(posedge Clk)
   begin: FIFO_READ_DFF
      
      begin
         if (Reset == 1'b1)
            fifo_Read <= 1'b0;
         else
            fifo_Read <= tx_Data_Enable & mux_sel_is_zero;
      end
   end
   
   assign data_to_transfer[0:C_DATA_BITS - 2] = fifo_DOut[0:C_DATA_BITS - 2];
   
   assign data_to_transfer[C_DATA_BITS - 1] = (select_Parity == 1'b1) ? parity : 
                                              fifo_DOut[C_DATA_BITS - 1];
   
   assign mux_01 = (mux_sel[2] == 1'b1) ? data_to_transfer[1] : 
                   data_to_transfer[0];
   assign mux_23 = (mux_sel[2] == 1'b1) ? data_to_transfer[3] : 
                   data_to_transfer[2];
   
   generate
      if (C_DATA_BITS == 5)
      begin : DATA_BITS_IS_5
         assign mux_45 = data_to_transfer[4];
         assign mux_67 = 1'b0;
      end
   endgenerate
   
   generate
      if (C_DATA_BITS == 6)
      begin : DATA_BITS_IS_6
         assign mux_45 = (mux_sel[2] == 1'b1) ? data_to_transfer[5] : 
                         data_to_transfer[4];
         assign mux_67 = 1'b0;
      end
   endgenerate
   
   generate
      if (C_DATA_BITS == 7)
      begin : DATA_BITS_IS_7
         assign mux_45 = (mux_sel[2] == 1'b1) ? data_to_transfer[5] : 
                         data_to_transfer[4];
         assign mux_67 = data_to_transfer[6];
      end
   endgenerate
   
   generate
      if (C_DATA_BITS == 8)
      begin : DATA_BITS_IS_8
         assign mux_45 = (mux_sel[2] == 1'b1) ? data_to_transfer[5] : 
                         data_to_transfer[4];
         assign mux_67 = (mux_sel[2] == 1'b1) ? data_to_transfer[7] : 
                         data_to_transfer[6];
      end
   endgenerate
   
   assign mux_0123 = (mux_sel[1] == 1'b1) ? mux_23 : 
                     mux_01;
   assign mux_4567 = (mux_sel[1] == 1'b1) ? mux_67 : 
                     mux_45;
   assign mux_Out = (mux_sel[0] == 1'b1) ? mux_4567 : 
                    mux_0123;
   
   
   always @(posedge Clk)
   begin: SERIAL_DATA_DFF
      
      begin
         if (Reset == 1'b1)
            serial_Data <= 1'b0;
         else
            serial_Data <= mux_Out;
      end
   end
   
   
   always @(posedge Clk)
   begin: SERIAL_OUT_DFF
      
      begin
         if (Reset == 1'b1)
            TX <= 1'b1;
         else
            TX <= ((~(tx_Run)) | serial_Data) & ((~(tx_Start)));
      end
   end
   
   generate
      if (C_USE_PARITY == 1)
      begin : USING_PARITY
         
         
         always @(posedge Clk)
         begin: PARITY_DFF
            
            begin
               if (tx_Start == 1'b1)
                  parity <= bo2sl[C_ODD_PARITY == 1];
               else if (tx_Data_Enable == 1'b1)
                  parity <= parity ^ serial_Data;
            end
         end
         
         
         always @(posedge Clk)
         begin: TX_RUN1_DFF
            
            begin
               if (Reset == 1'b1)
                  tx_Run1 <= 1'b0;
               else if (tx_Data_Enable == 1'b1)
                  tx_Run1 <= tx_DataBits;
            end
         end
         
         assign tx_Run = tx_Run1 | tx_DataBits;
         
         
         always @(posedge Clk)
         begin: SELECT_PARITY_DFF
            
            begin
               if (Reset == 1'b1)
                  select_Parity <= 1'b0;
               else if (tx_Data_Enable == 1'b1)
                  select_Parity <= mux_sel_is_zero;
            end
         end
      end
   endgenerate
   
   generate
      if (C_USE_PARITY == 0)
      begin : NO_PARITY
         assign tx_Run = tx_DataBits;
         always @(*) select_Parity <= 1'b0;
      end
   endgenerate
   
   assign fifo_wr = Write_TX_FIFO & ((~tx_buffer_full_i));
   
   assign fifo_rd = fifo_Read & ((~fifo_Data_Empty));
   
   assign TX_FIFO_Reset = Reset_TX_FIFO | Reset;
   
   
   proc_common_v3_00_a.srl_fifo_f #(C_DATA_BITS, 16, C_FAMILY) SRL_FIFO_I(.clk(Clk), .reset(TX_FIFO_Reset), .fifo_write(fifo_wr), .data_in(TX_Data), .fifo_read(fifo_rd), .data_out(fifo_DOut), .fifo_full(tx_buffer_full_i), .fifo_empty(fifo_Data_Empty));
   
   assign TX_Buffer_Full = tx_buffer_full_i;
   assign TX_Buffer_Empty = fifo_Data_Empty;
   assign fifo_Data_Present = (~fifo_Data_Empty);
   
endmodule
